循环使用：
	a. 找出循环条件、循环操作
	b. 代入循环语法结构
	c. 判断能否退出循环，不能出现死循环

定义函数，求菲布拉契数列某项
	1,1,2,3,5,8,13,21,...

递归：
	函数内部实现对自身的调用
		递出去
		归回来
	可能导致效率低下
		通常递归都可以使用循环来代替

	阶乘：
		10!  = 10 * 9 * 8 * 7 * ... * 1
			 = 10 * 9!
		9! = 9 * 8!
		8! = 8 * 7!

对象(万物皆对象)：
	一系列属性的无序集合

	对象属性调用：
		a. 对象名.属性名
		b. 对象名["属性名"]


	var stu = {
		姓名: "王东", // var name = ""
		年龄: 16,
		性别: "男",
		电话: "",
		吃饭: function(){}, // var eat = function(){}
		睡觉: function(){}
	}

	stu.姓名
	stu["电话"] -- 索引



数组(Array)：
	作用：使用单独的变量名来存储一系列的值。
	创建数组对象：
		a. var arr = []; 
		b. var arr = new Array();
		c. var arr = [value1, value2, ...];
		d. var arr = new Array(value1, value2, ...);
		e. var arr = new Array(size);
			-- size 表示数组空间大小
	概念：
		元素：数组中数据保存的空间
		下标：数组中元素的编号，从0开始
		长度：数组中元素的个数
	数组元素的引用：
		数组名[下标]
	数组元素遍历(迭代)：
		a. 普通循环
			for (var i = 0; i < 5; i++) {
				sum += scores[i]
			}
		b. for-in
			// 迭代数组元素：
			for (var i in array) {
				// i 中保存的是当前遍历到的数组元素下标，字符串格式
				// 仍然可以使用 array[i] 来访问到对应下标处的元素
			}
			// 迭代对象属性
			for (var attrName in obj) {
				// attrName 是对象的属性名字符串
				// 使用 obj[attrName] 来获取对应属性值
			}

	API：
		属性：length -- 数组长度
		方法：
			添加元素：
				push(value1, value2, ...) -- 向末尾追加
				unshift(value1, value2, ...) -- 向开头插入
				splice(index, 0, value1, value2, ...) -- 指定下标插入
			删除元素：
				pop() -- 末尾删除一个元素，返回被删除的元素值
				shift() -- 开头删除一个元素，并返回删除值
				splice(index, howmany, value1, value2, ...) -- 从指定index处删除howmany个元素，并以 value1, value2...值替换，返回被删除元素组成的数组
			排序：
				reverse() -- 反转
				sort() -- 默认按数组元素字符串unicode编码升序排序
			连接：
				concat() -- 数组连接数组或元素，返回连接后的新数组
				join() -- 将数组中每个元素默认以,(逗号)连接成字符串后返回
			截取：
				slice(start, end) -- 截取数组从start开始到end结束下标处的元素，包括start开始索引处元素，不包括end结束索引处元素。end也可以省略，当省略时表示截取到数组最后。start与end也可以取负值，表示从后向前计数
			转换：
				toString() -- 转换为字符串

字符集：
	ASCII
	GBK
	GB2312
	BIG5
	Unicode
		utf-8
		utf-16

排序算法：
	冒泡排序（升序）
		两两相邻元素比较大小，每轮比较过程中找出最大值放到该轮最后一个元素位置，经过多轮比较，将所有元素升序排序
		代码：
			二重循环，外层循环控制比较轮数，内层循环控制每轮比较的次数。
			外层循环 N-1，内层循环 N-1-i
			N=array.length
	插入排序
	选择排序
	快速排序
	希尔排序