吴明富-小明

练习：
	打印九九乘法表

资源：
	离线手册
	在线手册：http://www.w3school.com.cn/
	菜鸟教程：http://www.runoob.com/
	MDN：https://developer.mozilla.org/zh-CN/
书籍：
	《JavaScript高级程序设计（第3版）》
	《JavaScript权威指南》

JavaScript = ECMAScript + DOM + BOM

程序执行方式：
	解释执行
	编译执行

数据类型：
	基本数据类型
		Number：数字、NaN、Infinity
		Null：null，通常用于表示对象的空
		Boolean：布尔，true、false
		String：字符串，使用 '' 或 "" 包含
		Undefined：undefined，未定义
		Symbol(ES6)
	引用数据类型
		Object：对象，万物皆对象(面向对象编程-OOP)
			{
				颜色,
				型号,
				接收输入()
			}
			属性
			方法()
	求解表达式的数据类型：
		typeof ---- 
			"number"
				typeof NaN --> "number"
			"string"
			"boolean"
			"undefined"
			"object"
			"symbol"
			"function"

数据类型转换：
	"1" + 3 = "13"
	2 + 5 + "3" = "73"
	强制(显式)：
		parseInt()
		parseFloat()
			-- 通常是将字符串解析为数字
			-- parseInt("234");
			-- parseInt("123", 8);

		Number()
			-- 将其它数据类型转换为数字类型

		Boolean()
			-- 将其它类型转换为 Boolean 类型

		String()

	自动(隐式)：

流程控制语句：
	顺序结构
	选择（条件）结构
		if
		if-else
		多重if
		switch
			== ===
	循环结构
		for
		while
		do-while

	跳转语句
		break;
		continue;
		return 表达式;

函数：
	函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。

	定义：
		函数声明
		函数表达式
		new Function()
	调用：
		函数名()
		事件驱动
	参数(输入条件)：
		定义：形参
		调用：实参
	返回值(输出条件)：
		返回到函数调用处

练习：
	a. 定义函数，求两个数字之和
	b. 定义函数，求某个数字的阶乘
		5! = 1 * 2 * 3 * 4 * 5
		10! = 10 * 9 * 8 * 7 * 6 * .... * 1
	c. 定义函数，求两个数字的最大公约数
	d. 定义函数，求菲布拉契数列某项
		1, 1, 2, 3, 5, 8, 13, 21, 34, 55

document.getElementById("id")
	-- 根据元素的 id 来获取元素

isNaN(param)
	-- 判断参数是否为非数字

数字表达式.toFixed(小数位数数字参数);
	-- 将数字转换为字符串，在转换后的结果中，保留小数点后指定位数的小数

参数：
	形参个数和实参个数可以不等。当实参个数少于形参个数时，未传递的参数，在函数主体中为 undefined。实参个数多于形参个数时，多余传递的参数被忽略。

arguments
	-- 代表函数被调用时，实际参数列表。
	-- 可以使用 arguments.length 来获取实参个数
	-- 可以使用 arguments[index] 来获取index索引处的参数，其中 index 为参数的编号，从0开始的编号

穷举法：

作用域：
	全局作用域
		定义在函数外部的变量，拥有全局作用域。
	局部作用域(函数作用域)
		使用var定义在函数内部的变量，拥有函数作用域。
	块级作用域
		ES6前：IIFE
			立即调用函数表达式(自执行匿名函数)
		ES6：let/const
			let 定义变量
			const 定义常量

作用域链：
	函数嵌套，内层函数可以使用外层函数中的局部变量，在变量使用时的变量查找路径被称作是作用域链：先在变量自身所在作用域查找，不能找到向上层作用域查找，如不能查找到再向上层继续查找，直接找到第一个满足条件的变量则使用，如果找到全局作用域都不存在，则报错

声明提升（预解析）
	将使用 var 定义变量时的声明部分提升到对应作用域的最顶部（只提升声明部分，赋值部分位置不动）。
	函数如果使用的是 函数声明(function 函数名(){}) 的语法定义，则将函数声明及主体整体提升到作用域的最顶部；如果使用的是 函数表达式(var 变量名=function(){}) 的语法定义，则只提升变量声明部分，变量赋值部分位置不变

IIFE:	
	(function(){
			console.log("匿名函数");
	})();

	(function(){
		console.log("匿名函数");
	}());
let:
	没有变量声明提升，有"暂存死区"，
	使用let/const 定义变量前，不能使用变量，在定义变量前的位置被称作是“暂存死区”

项目开发流程：
	可行性分析 -- 需求分析 -- 概要设计 -- 详细设计 -- 编码 -- 测试 -- 交付 -- 维护


预习：
	递归算法
	数组